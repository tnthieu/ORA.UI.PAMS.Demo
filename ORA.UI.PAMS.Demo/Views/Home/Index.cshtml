@using ORA.UI.PAMS.Demo.Models;

<center>
    <h2>PAMS</h2>
</center>

@(Html.DevExtreme().TabPanel()
                .ID("tabpanel-container")
                .Height("100%")
                .Width("100%")
                .DataSource(new NameValue[2] { new NameValue("Tab1: Partial View", "1"), new NameValue("Tab2: Ajax load", "2") })
                .SelectedIndex(0)
                .Loop(false)
                .AnimationEnabled(true)
                .SwipeEnabled(true)
                .ItemTitleTemplate(@<text>
                    <span><%- Name %></span>
                </text>)
                .ItemTemplate(@<text>
                    <div class="tabpanel-item">
                        <% if(Value == '1') { %>
                        <center>
                            <div>
                                    @(Html.DevExtreme().Button()
                                .Icon("check")
                                .Text("ShowSelectedData")
                                .Type(ButtonType.Success)
                                .OnClick("DisplayAllSelectedData")
                                )
                                </div>
                                <div id="grid-container1">
                                    <partial name="~/Views/Home/_SpecialNoteGRID.cshtml" />
                                </div>
                            </center>
                            <% } else { %>
                            <center>
                                        @(Html.DevExtreme().Button()
                                .Icon("check")
                                .Text("Load Grid from Ajax")
                                .Type(ButtonType.Success)
                                .OnClick("LoadGrid")
                                )
                                <div id="grid-container2">
                                </div>
                            </center>
                            <% } %>
                        </div>
                    </text>)
                    .OnSelectionChanged("onTabChanged")
)

<!-- ConfirmPopup -->
<div class="modal fade" id="ConfirmPopup" tabindex="-1" role="dialog" aria-labelledby="ConfirmTitle" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="ConfirmTitle">Confirm Title</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" onclick="ConfirmCancel();">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="ConfirmContent">
                Confirm Content
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" id="ConfirmOK" style="width: 100px;">OK</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal" style="width: 100px;" onclick="ConfirmCancel();">Cancel</button>
            </div>
        </div>
    </div>
</div>

<script>
    function onTabChanged(e) {
        let tab = e.component.option("selectedIndex") + 1;
        ResizeTabPanel(tab);
    }

    function ResizeTabPanel(tab) {
        let width = $("#grid-container" + tab + " .dx-datagrid-table").width();
        if (width < $(window).width())
            width = $(window).width();

        $("#tabpanel-container").width(width);
    }

    function LoadGrid() {
        let postBackURL = "/Home/Grid";

        $.ajax({
            url: postBackURL,
            method: 'GET'
        })
            .done(function (data) {
                $("#grid-container2").html(data);
                return false;
            })
            .fail(function () {
                alert('Postback failed.');
            })
    }
</script>

<script>
    function onEditorPreparing(e) {
        onEditorPreparing_Comment(e);
        onEditorPreparing_Selection(e);
    }

    function onEditorPreparing_Comment(e) {
        let dataGrid = e.component;
        if (e.parentType === "dataRow") {

            if (e.dataField === "Comment") {
                e.editorName = "dxHtmlEditor"; //"dxTextArea";
                e.editorOptions.toolbar = {
                    items: [

                        "bold",
                        "italic",
                        "strike",
                        "underline",

                    ]
                };
            }
        }
    }
</script>

<script>
    let selectAllCheckBox;
    let checkBoxUpdating = false;

    function onEditorPreparing_Selection(e) {
        let dataGrid = e.component;
        if (e.command === "select") {
            if (e.parentType === "dataRow" && e.row) {
                if (!isSelectable(e.row.data))
                    e.editorOptions.disabled = true;
            } else if (e.parentType === "headerRow") {
                e.editorOptions.onInitialized = function (e) {
                    selectAllCheckBox = e.component;
                }
                e.editorOptions.value = isSelectAll(dataGrid);
                e.editorOptions.onValueChanged = function (e) {
                    if (!e.event) {
                        if (e.previousValue && !checkBoxUpdating) {
                            e.component.option("value", e.previousValue);
                        }
                        return;
                    }
                    if (isSelectAll(dataGrid) === e.value) {
                        return;
                    }

                    e.value ? dataGrid.selectAll() : dataGrid.deselectAll();

                    e.event.preventDefault();
                }
            }
        }
    }

    function isSelectable(item) {
        return item.IsActive;
    }

    function isSelectAll(dataGrid) {
        let items = [];

        dataGrid.getDataSource().store().load().done(function (data) {
            items = data;
        });

        let selectableItems = items.filter(isSelectable);
        let selectedRowKeys = dataGrid.option("selectedRowKeys");

        if (!selectedRowKeys.length) {
            return false;
        }
        return selectedRowKeys.length >= selectableItems.length ? true : undefined;
    }

    function onSelectionChanged(e) {
        let deselectRowKeys = [];

        e.selectedRowsData.forEach((item) => {
            if (!isSelectable(item))
                deselectRowKeys.push(e.component.keyOf(item));
        });

        if (deselectRowKeys.length) {
            e.component.deselectRows(deselectRowKeys);
        }

        checkBoxUpdating = true;
        selectAllCheckBox.option("value", isSelectAll(e.component));
        checkBoxUpdating = false;
    }
</script>

<script>
    function DisplayAllSelectedData() {
        const gridView = DevExpress.ui.dxDataGrid.getInstance(document.getElementById('grid1'));
        let selectedRows = gridView.getSelectedRowsData();
        let dialogContent = "";
        selectedRows.forEach(function (row) {
            dialogContent += row.Id + "- " + row.UserName + "<br/>";
        });
        DevExpress.ui.dialog.alert(dialogContent, "");
    }
</script>

<script>
    let isSaveClick = false;

    function isEditVisible(e) {
        return !e.row.isEditing;
    }
    function onEditClick(e) {
        e.component.editRow(e.row.rowIndex);
        e.event.preventDefault();
    }

    function isSaveVisible(e) {
        return e.row.isEditing;
    }
    function onSaveClick(e) {
        ShowConfirmPopup("Confirm Saving", "Are you sure you want to save changes?", () => {
            isSaveClick = true;
            e.component.saveEditData().then(() => {
                isSaveClick = false;
            });
        });
        e.event.preventDefault();
    }

    function isCancelVisible(e) {
        return e.row.isEditing;
    }
    function onCancelClick(e) {
        ShowConfirmPopup("Confirm Cancellation", "Are you sure you want to cancel?", () => {
            e.component.cancelEditData();
        });
        e.event.preventDefault();
    }
</script>

<script>
    function ConfirmCancel() {
        $('#ConfirmPopup').modal('hide');
        isSaveClick = false;
    }
    function ShowConfirmPopup(title, content, callback) {
        $("#ConfirmTitle").text(title);
        $("#ConfirmContent").text(content);
        $('#ConfirmPopup').modal('show');

        $("#ConfirmOK").click(() => {
            callback();
            $('#ConfirmPopup').modal('hide');
        });
    }
</script>

<script>
    function rowValidating(e) {
        const request = $.ajax({
            url: '@Url.Action("ValidateRow", "SpecialNote")',
            type: "GET",
            dataType: "json",
            contentType: "application/json",
            data: { ...e.oldData, ...e.newData }
        });

        request.done((json) => {
            if (json.isValid === false) {
                e.isValid = false;
                e.errorText = `Error: ${json.data}`;
            }
        });

        e.promise = request;
    }

    //function validateComment(e) {
    //    if (!isSaveClick) return new Promise(r => r(true));

    //    return $.ajax({
    //        url: '@Url.Action("ValidateComment", "SpecialNote")',
    //        type: "GET",
    //        dataType: "json",
    //        contentType: "application/json",
    //        data: { Comment: e.data.Comment }
    //    });
    //}
</script>

<style>
    /*body padding*/
    .container, .container-fluid, .container-xxl, .container-xl, .container-lg, .container-md, .container-sm {
        padding-right: 0px !important;
        padding-left: 0px !important;
    }

    /*body max-width*/
    @@media (min-width: 576px) {
        .container-sm, .container {
            max-width: 1920px !important;
        }
    }

    @@media (min-width: 768px) {
        .container-md, .container-sm, .container {
            max-width: 1920px !important;
        }
    }

    @@media (min-width: 992px) {
        .container-lg, .container-md, .container-sm, .container {
            max-width: 1920px !important;
        }
    }

    @@media (min-width: 1400px) {
        .container-xxl, .container-xl, .container-lg, .container-md, .container-sm, .container {
            max-width: 1920px !important;
        }
    }    
</style>

<style>
    /*grid font-size*/
    .dx-widget {
        font-size: 9pt;
    }

    /*pager position*/
    .dx-datagrid.dx-datagrid-borders > .dx-datagrid-pager {
        order: -1;
        border-top: 0px;
    }

    /* paging icon position */
    .dx-pager .dx-page-sizes {
        float: right;
    }

    .dx-pager .dx-pages {
        float: left;
    }

    .col.px-4.py-3.hub-content {
        width: 80% !important;
    }

    /*row middle / center*/
    tbody .middle {
        vertical-align: middle !important;
    }

    tbody .middle-center {
        text-align: center !important;
        vertical-align: middle !important;
    }

    /*selected row*/
    .dx-datagrid-content .dx-datagrid-table .dx-row > td, .dx-datagrid-content .dx-datagrid-table .dx-row > tr > td {
        background: white;
    }

    .dx-datagrid-rowsview .dx-selection.dx-row:not(.dx-row-focused) > td, .dx-datagrid-rowsview .dx-selection.dx-row:not(.dx-row-focused) > tr > td, .dx-datagrid-rowsview .dx-selection.dx-row:not(.dx-row-focused):hover > td, .dx-datagrid-rowsview .dx-selection.dx-row:not(.dx-row-focused):hover > tr > td {
        background-color: rgb(255, 255, 153);
    }

    /*textarea: resizeable*/
    textarea[aria-label="Filter cell"] {
        resize: none !important;
    }

    textarea:not([aria-label="Filter cell"]) {
        resize: vertical !important;
    }
</style>