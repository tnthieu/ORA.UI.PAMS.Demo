@using ORA_UI_PAMS_Demo.Models

<h2>Home</h2>

@(
Html.DevExtreme().DataGrid<SampleOrder>()
    .ShowBorders(true)
    .DataSource(d => d.Mvc()
        .Controller("SampleData")
        .LoadAction("Get")
        .UpdateAction("Update")
        .InsertAction("Insert")
        .DeleteAction("Delete")
        .Key("Id")
    )
    .Sorting(sorting => sorting.Mode(GridSortingMode.Multiple))
    .Editing(editing =>
    {
        editing.Mode(GridEditMode.Row);
        editing.AllowDeleting(true);
        editing.AllowUpdating(true);
    })
    .Columns(columns =>
    {
        columns.AddFor(m => m.IsImportant).Caption("").Width(50)
        .CellTemplate(@<text>
            <% if(data.IsImportant) { %>
            <img src="~/img/star.gif" style="width: 30px">
            <% } else { %>
            <div></div>
            <% } %>
        </text>);

        columns.AddFor(m => m.CreatedDate).AllowEditing(false).Caption("Created Date").Format("MM/dd/yy hh:mm");
        columns.AddFor(m => m.ModifiedDate).AllowEditing(false).Caption("Latest Updated Date").Format("MM/dd/yy hh:mm");

        columns.AddFor(m => m.UserName).AllowEditing(false).Caption("User Name");
        columns.AddFor(m => m.Category).Caption("Category")
            .Lookup(lookup => lookup
                .DataSource(d => d.Mvc().Controller("Category").LoadAction("Get").Key("Id"))
                .DisplayExpr("Name")
                .ValueExpr("Name")
            );

        columns.AddFor(m => m.Comment).Caption("Comment").Width(150).EditCellTemplate(@<text>
            <textarea rows="2" keypress="return tbxOnKeyDown(e);"><%- data.Comment %></textarea>
        </text>);

        columns.AddFor(m => m.Fund).Caption("Fund");

        columns.AddFor(m => m.AttachmentName).AllowEditing(false).Caption("Attachments").CellTemplate(@<text>
            <a href="#" onclick="alert('popup...')">Attachments: <%- data.AttachmentCount %></a>
        </text>);

        columns.AddFor(m => m.EditComment).AllowEditing(false).Caption("History");
    })
    .Paging(paging => paging.PageSize(10))
    .Pager(pager =>
    {
        pager.ShowPageSizeSelector(true);
        pager.AllowedPageSizes(new[] { 5, 10, 15, 20 });
        pager.ShowInfo(true);
    })
    .FilterRow(f => f.Visible(true))
    .HeaderFilter(f => f.Visible(true))
    .GroupPanel(p => p.Visible(true))
    .Grouping(g => g.AutoExpandAll(false))
    .RemoteOperations(true)
    .Summary(s => s
        .TotalItems(totalItems =>
        {
            totalItems.AddFor(m => m.Id).SummaryType(SummaryType.Count);
        })
        .GroupItems(groupItems =>
        {
            groupItems.Add().SummaryType(SummaryType.Count);
        })
    )
)

<script>
    function Funds(options) {
        return {
            filter: options.data ? ["Name", "=", options.data.Fund] : null
        };
    }

    function tbxOnKeyDown(e) {
        alert('enter...');
    }
</script>